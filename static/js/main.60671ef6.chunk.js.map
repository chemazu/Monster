{"version":3,"sources":["Components/Card/Card.jsx","Components/CardList/CardList.jsx","Components/Search/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","Fragment","alt","this","props","profile","id","src","name","email","Component","CardList","className","monsters","map","key","Search","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","data","filteredMonsters","filter","monster","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAgBeA,G,YAdf,iLAEQ,OACI,kBAAC,IAAMC,SAAP,KACA,6BACI,yBAAKC,IAAMC,KAAKC,MAAMC,QAAQC,GAAIC,IAAG,+BAA4BJ,KAAKC,MAAMC,QAAQC,GAA/C,qBACrC,4BAAKH,KAAKC,MAAMC,QAAQG,MACxB,2BAAIL,KAAKC,MAAMC,QAAQI,aAPvC,GAA0BC,cCYXC,EAVf,iLAEQ,OACI,yBAAKC,UAAY,YACZT,KAAKC,MAAMS,SAASC,KAAI,SAAAT,GAAU,OAAO,kBAAC,EAAD,CAAMA,QAASA,EAASU,IAAMV,EAAQC,aAJhG,GAA8BI,aCaf,SAASM,EAAT,GAA6C,IAA5BC,EAA2B,EAA3BA,YAAYC,EAAe,EAAfA,aACxC,OACI,2BAAON,UAAW,YAAYO,KAAM,SAASF,YAAcA,EAAaG,SAAWF,ICbpF,IA6BQG,EA7Bf,YACE,aAAc,IAAD,8BACX,+CAYFH,aAAa,SAACI,GAAK,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAXrD,EAAKC,MAAM,CACTd,SAAS,GACTW,YAAc,IAJL,EADf,iFAQsB,IAAD,OAEjBI,MADW,8CAEVC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAM,SAAAG,GAAI,OAAG,EAAKT,SAAS,CAACV,SAASmB,SAZ1C,+BAeY,IAAD,EACwB7B,KAAKwB,MAA7Bd,EADA,EACAA,SAAUW,EADV,EACUA,YACXS,EAAmBpB,EAASqB,QAAO,SAAAC,GAAO,OAAEA,EAAQ3B,KAAK4B,cAAcC,SAASb,EAAYY,kBAClG,OACE,yBAAKxB,UAAU,OACb,kBAACI,EAAD,CAAQG,KAAM,SAASF,YAAc,sBAAuBC,aAAgBf,KAAKe,eACjF,kBAAC,EAAD,CAAUL,SAAUoB,SArB5B,GAAyBvB,aCML4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.60671ef6.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Card extends Component {\n    render() {\n        return (\n            <React.Fragment>\n            <div>\n                <img alt ={this.props.profile.id} src = {`https://robohash.org/${this.props.profile.id}AC.png?set=set1`}/>\n                <h1>{this.props.profile.name}</h1>\n                <p>{this.props.profile.email}</p>\n            </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Card\n","import React, { Component } from 'react'\nimport './CardList.css'\nimport Card from '../Card/Card'\n\nexport class CardList extends Component {\n    render() {\n        return (\n            <div className = 'cardlist'>\n                {this.props.monsters.map(profile=>{return(<Card profile={profile} key ={profile.id}/>)})}\n            </div>\n        )\n    }\n} \n\nexport default CardList\n","// import React, { Component } from 'react'\n\n// export class Search extends Component {\n//     render() { // the items that are in the {} are destructed from  props\n//         const {placeholder,handleChange}=this.props\n//         return (\n//               <input className= 'searchBox' type ='search' placeholder ={placeholder} onChange ={handleChange}/>  \n\n//         )\n//     }\n// }\n\n// export default Search\n// THIS CAN ALSO BE WRITTEN AS FUNCTION BASED BELOW, IT IS BEST TO USE FUNCTION BASED COMPONENTS, WHEN STATE ISN'T REQUIRED\n\nimport React from 'react'\n\nexport default function Search({placeholder,handleChange}) {\n    return (\n        <input className= 'searchBox' type ='search' placeholder ={placeholder} onChange ={handleChange}/>\n    )\n}\n","import React, { Component } from 'react'\nimport './App.css';\nimport CardList from './Components/CardList/CardList'; \nimport Search from './Components/Search/Search';\n\n\nexport class App extends Component {\n  constructor(){\n    super()\n    this.state={\n      monsters:[],\n      searchField : '',\n    }\n  }\n  componentDidMount(){\n    const url ='https://jsonplaceholder.typicode.com/users';\n    fetch(url)\n    .then(res=> res.json())\n    .then( data=> this.setState({monsters:data}))\n  }\n  handleChange=(e)=>{this.setState({searchField:e.target.value})}\n  render() {\n    const {monsters, searchField}= this.state;\n    const filteredMonsters = monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))//1. monster.name returns the name of the function since the name could be anything, 2. .includes checks if what is typed in searchField exists in monster \n    return (\n      <div className=\"App\">\n        <Search type ='search' placeholder ={'Search Monster Name'} handleChange = {this.handleChange}/>\n        <CardList monsters={filteredMonsters}/> \n      </div> \n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}